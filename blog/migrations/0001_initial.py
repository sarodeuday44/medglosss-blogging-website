# Generated by Django 3.1.8 on 2021-04-11 20:32

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mdeditor.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlogSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sitename', models.CharField(default='', max_length=200, verbose_name='Website name ')),
                ('site_description', models.TextField(default='', max_length=1000, verbose_name='Website description')),
                ('site_seo_description', models.TextField(default='', max_length=1000, verbose_name='Website SEO Description ')),
                ('site_keywords', models.TextField(default='', max_length=1000, verbose_name='Website keyword')),
                ('article_sub_length', models.IntegerField(default=300, verbose_name='Article summary length')),
                ('sidebar_article_count', models.IntegerField(default=10, verbose_name='Side bar article number ')),
                ('sidebar_comment_count', models.IntegerField(default=5, verbose_name='Side barbase Number')),
                ('show_google_adsense', models.BooleanField(default=False, verbose_name='Whether to show Google Advertising')),
                ('google_adsense_codes', models.TextField(blank=True, default='', max_length=2000, null=True, verbose_name='Advertising content')),
                ('open_site_comment', models.BooleanField(default=True, verbose_name='Do you open a website comment function?')),
                ('beiancode', models.CharField(blank=True, default='', max_length=2000, null=True, verbose_name='record number')),
                ('analyticscode', models.TextField(default='', max_length=1000, verbose_name='Website statistics code')),
                ('show_gongan_code', models.BooleanField(default=False, verbose_name='Will there be a public security?')),
                ('gongan_beiancode', models.TextField(blank=True, default='', max_length=2000, null=True, verbose_name='Public security')),
                ('resource_path', models.CharField(default='/var/www/resource/', max_length=300, verbose_name='Static file save address')),
            ],
            options={
                'verbose_name': 'Website configuration',
                'verbose_name_plural': 'Website configuration',
            },
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Link name')),
                ('link', models.URLField(verbose_name='link address')),
                ('sequence', models.IntegerField(unique=True, verbose_name='Sort')),
                ('is_enable', models.BooleanField(default=True, verbose_name='Is it displayed?')),
                ('show_type', models.CharField(choices=[('i', 'Homepage'), ('l', 'List'), ('p', 'Article page'), ('a', 'Full Site'), ('s', 'Friendly link page')], default='i', max_length=1, verbose_name='Display type')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Create time')),
                ('last_mod_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Change the time')),
            ],
            options={
                'verbose_name': 'Links',
                'verbose_name_plural': 'Links',
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='SideBar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='title')),
                ('content', models.TextField(verbose_name='content')),
                ('sequence', models.IntegerField(unique=True, verbose_name='Sort')),
                ('is_enable', models.BooleanField(default=True, verbose_name='Whether to enable')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Create time')),
                ('last_mod_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Change the time')),
            ],
            options={
                'verbose_name': 'Sidebar',
                'verbose_name_plural': 'Sidebar',
                'ordering': ['sequence'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Create time')),
                ('last_mod_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Change the time')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Label')),
                ('slug', models.SlugField(blank=True, default='no-slug', max_length=60)),
            ],
            options={
                'verbose_name': 'label',
                'verbose_name_plural': 'label',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Create time')),
                ('last_mod_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Change the time')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Classification name')),
                ('slug', models.SlugField(blank=True, default='no-slug', max_length=60)),
                ('parent_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='blog.category', verbose_name='Parent classification')),
            ],
            options={
                'verbose_name': 'classification',
                'verbose_name_plural': 'classification',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Create time')),
                ('last_mod_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Change the time')),
                ('title', models.CharField(max_length=200, unique=True, verbose_name='title')),
                ('body', mdeditor.fields.MDTextField(verbose_name='text')),
                ('pub_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='release time')),
                ('status', models.CharField(choices=[('d', 'draft'), ('p', 'Publish')], default='p', max_length=1, verbose_name='Article state')),
                ('comment_status', models.CharField(choices=[('o', 'turn on'), ('c', 'shut down')], default='o', max_length=1, verbose_name='Comment status')),
                ('type', models.CharField(choices=[('a', 'article'), ('p', 'page')], default='a', max_length=1, verbose_name='Types of')),
                ('views', models.PositiveIntegerField(default=0, verbose_name='Browse')),
                ('article_order', models.IntegerField(default=0, verbose_name='Sort, the larger the number, the more')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Author')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.category', verbose_name='classification')),
                ('tags', models.ManyToManyField(blank=True, to='blog.Tag', verbose_name='Label collection')),
            ],
            options={
                'verbose_name': 'article',
                'verbose_name_plural': 'article',
                'ordering': ['-article_order', '-pub_time'],
                'get_latest_by': 'id',
            },
        ),
    ]
